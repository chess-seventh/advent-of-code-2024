[project]
name = "aoc_2024"
description = "aoc_2024_description"
authors = [ "Chess7th <chess7th@pm.me>" ]
maintainers = [ "Chess7th <chess7th@pm.me>" ]
keywords = ["python", "tdd"]

[tool.poetry]
name = "aoc_2024"
description = "aoc_2024_description"
authors = [ "Chess7th <chess7th@pm.me>" ]
maintainers = [ "Chess7th <chess7th@pm.me>" ]
version = "0.1.0"
packages = [{include = "aoc_2024", from = "modules"}]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pre-commit = "^3.6.0"
requests = "^2.31.0"
semver = "^3.0.2"
pydantic = "^2.5.3"
neovim = "^0.3.1"
bpython = "^0.24"
pyright = "^1.1.348"
black = "^24.1.0"
pylint = "^3.0.3"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.24.4"
black = "^24.1.0"
pylint = "^3.0.3"
coverage = "^7.4.1"
ptw = "^1.0.1"
pyright = "^1.1.348"
pytest = "^7.4.4"
pytest-bdd = "^7.0.1"
pytest-describe-it = "^0.1.0"
pytest-html = "^4.1.1"
pytest-cov = "^4.1.0"
pytest-pspec = "^0.0.4"
pytest-mock = "^3.12.0"
pytest-describe = "^2.1.0"
pytest-watch = "^4.2.0"
pytest-asyncio = "^0.23.3"
cookiecutter = "^2.5.0"

[tool.poe.tasks]
install_pre_hooks = "pre-commit install"
lint_modules = "pylint modules"
cleancode = "sh -c \"black ./modules ./tests && pylint ./modules ./tests \""

unit_tests = "pytest tests/unit --cov-report term --cov='.' --cov-report html --cov='.' --tb=long -l"
watch_unit = "ptw --nobeep --verbose --clear tests/unit -- --cov-report term --cov='.' --cov-report html --cov='.' --tb=long -l --cache-clear --lf"

watch_all = "ptw --nobeep --verbose --clear tests -- --cov-report term --cov='.' --cov-report html  --tb=long -l --cache-clear --ff --sw"
test_all = "pytest tests --cov-report term --cov='.' --cov-report html --tb=long -l"
coverage = "pytest tests  --cov-report term --cov='.' --cov-report html --cov='.' --cache-clear --rootdir='.'"
list_fixtures = "pytest -vv tests/ --tb=long -l --fixtures"

[project.urls]
Homepage = "https://git.sr.ht/~chess7th/aoc_2024"
Documentation = "https://aoc_2024.readthedocs.org"
Repository = "https://git.sr.ht/~chess7th/aoc_2024.git"
Issues = "https://git.sr.ht/~chess7th/aoc_2024/issues"
Changelog = "https://git.sr.ht/~chess7th/aoc_2024/CHANGELOG.md"

[tool.commitizen]
version = "0.1.0"
version_files = [
  "modules/aoc_2024/__version__.py",
  "pyproject.toml:version",
]
bump_message = "chore(release): $current_version â†’ $new_version"
update_changelog_on_bump = true

style = [ [ "qmark", "fg:#ff9d00 bold", ], [ "question", "bold", ], [ "answer", "fg:#ff9d00 bold", ], [ "pointer", "fg:#ff9d00 bold", ], [ "highlighted", "fg:#ff9d00 bold", ], [ "selected", "fg:#cc5454", ], [ "separator", "fg:#cc5454", ], [ "instruction", "", ], [ "text", "", ], [ "disabled", "fg:#858585 italic", ], ]

[tool.black]
line-length = 155

[tool.pytest.ini_options]
pythonpath = ["modules/", "tests/"]
addopts = ["--pspec", "-p", "no:warnings", "--import-mode=importlib"]

[tool.pyright]
include = ["modules/aoc_2024"]
exclude = [
    "**/__pycache__"]

ignore = ["modules/"]
defineConstant = { DEBUG = true }

reportMissingImports = false
reportMissingTypeStubs = false
reportGeneralTypeIssues = false

# python.analysis.autoImportCompletions = true  # [boolean]: Determines whether pyright offers auto-import completions.
# python.analysis.autoSearchPaths= true  # [boolean]: Determines whether pyright automatically adds common search paths like "src" if there are no execution environments defined in the config file.
# python.analysis.extraPaths = ["modules/"]  # [array of paths]: Paths to add to the default execution environment extra paths if there are no execution environments defined in the config file.


[tool.pylint.messages_control]
max-line-length = 155
jobs = 0 # Use auto-detected number of multiple processes to speed up Pylint.
disable = [ "arguments-differ", "arguments-renamed", "broad-except", "cyclic-import", "duplicate-code", "import-outside-toplevel", "invalid-name", "missing-class-docstring", "missing-function-docstring", "missing-module-docstring", "not-callable", "protected-access", "redefined-builtin", "redefined-outer-name", "signature-differs", "too-few-public-methods", "too-many-ancestors", "too-many-arguments", "too-many-branches", "too-many-instance-attributes", "too-many-lines", "too-many-locals", "too-many-public-methods", "too-many-statements", "unsubscriptable-object", "import-error", "wrong-import-position", "missing-timeout", "unspecified-encoding", "line-too-long", "missing-final-newline", "useless-parent-delegation"]


[tool.coverage.run]
branch = true
omit = [ "tests/*", "__version__.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
]

ignore_errors = true

